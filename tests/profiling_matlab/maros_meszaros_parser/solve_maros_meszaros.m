function [x, info, data, cones] = solve_maros_meszaros(sif_fname, o, e)

x=[]; info = []; data=[];
sif_parser = SifParser(sif_fname);
sif_parser.parse();
qp_data = sif_parser.get_qp_data();
n = size(qp_data.Q, 1);

cvx_begin
    cvx_solver scs    
    cvx_solver_settings('alpha', o.alpha, ...
    'beta', o.beta,...
    'c1', o.c1, ...
    'c_bl', o.c_bl, ...
    'k0', o.k0, ...
    'k1', o.k1, ...
    'k2', o.k2, ...
    'ls',  o.ls, ...
    'do_super_scs',o.do_super_scs,...
    'direction',o.direction,...
    'memory', o.memory,...
    'rho_x', o.rho_x, ...
    'scale', o.scale, ...
    'sigma', o.sigma,...
    'sse', o.sse,...
    'thetabar', o.thetabar,...
    'warm_start', o.warm_start,...
    'max_iters', o.max_iters, ...
    'eps',e, ...
    'do_record_progress', o.do_record_progress, ...
    'dumpfile','temp_smm.mat')
    variable x(n)
    minimize( 0.5*x'*qp_data.Q*x + qp_data.q'*x );
    subject to
        qp_data.A*x == qp_data.b
        qp_data.C*x <= qp_data.c       
        for i=1:length(qp_data.u)
            if ~isinf(qp_data.u(i)),
                x(i) <= qp_data.u(i)
            end
        end
        for i=1:length(qp_data.l)
            if ~isinf(qp_data.l(i)),
                x(i) >= qp_data.l(i)
            end
        end
        for i=1:size(qp_data.c_fix)
            x(qp_data.c_fix(i,1)) == qp_data.c_fix(i,2)
        end
cvx_end

load temp_smm.mat
cones = K;
delete('temp_smm.mat')

